	public int dfs_visit(Aeropuerto actual, Aeropuerto destino, Vector<Aeropuerto> vec, Aerolinea aerolinea,
			int cantidad_kilometros, Vector<Ruta> Rutas) {

		for (int i = 0; i < actual.getRutas().size(); i++) {
			Ruta temporal = actual.getRutas().elementAt(i);
			if (temporal.contiene_aerolinea_distinta_a(aerolinea)) {
				Aeropuerto aux = temporal.getDestino();
				vec.add(actual);
				Rutas.add(temporal);

				// System.out.println(temporal.getDestino().getNombre());
				// System.out.println(cantidad_kilometros);
				cantidad_kilometros += temporal.getKilometros();
				if (aux.equals(destino)) {

					vec.add(aux);
					imprimir_vector_rutas(Rutas);

					System.out.println("Cantidad Kilometros a realizar " + cantidad_kilometros);

					imprimir_vector(vec);

					System.out.println("Camino encontrado \n");
					// cantidad_kilometros = 0;
					vec.remove(aux);

				} else if (aux.getEstado().equals("Sin Visitar")) {
					// cantidad_kilometros += temporal.getKilometros();
					// System.out.println("sdfgidsfjoisdfoinsfd "+actual.getNombre());

					aux.setEstado("Visitado");

					cantidad_kilometros = dfs_visit(aux, destino, vec, aerolinea, cantidad_kilometros, Rutas);

					aux.setEstado("Sin Visitar");
				}
				cantidad_kilometros -= temporal.getKilometros();
				vec.remove(actual);
				Rutas.remove(temporal);

			}
		}
		return cantidad_kilometros;

	}
